// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/entity/student.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/piovani/go_full/domain/entity"
)

// MockStudentRepository is a mock of StudentRepository interface.
type MockStudentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStudentRepositoryMockRecorder
}

// MockStudentRepositoryMockRecorder is the mock recorder for MockStudentRepository.
type MockStudentRepositoryMockRecorder struct {
	mock *MockStudentRepository
}

// NewMockStudentRepository creates a new mock instance.
func NewMockStudentRepository(ctrl *gomock.Controller) *MockStudentRepository {
	mock := &MockStudentRepository{ctrl: ctrl}
	mock.recorder = &MockStudentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentRepository) EXPECT() *MockStudentRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockStudentRepository) All(students *[]entity.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", students)
	ret0, _ := ret[0].(error)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockStudentRepositoryMockRecorder) All(students interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockStudentRepository)(nil).All), students)
}

// Find mocks base method.
func (m *MockStudentRepository) Find(student *entity.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", student)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockStudentRepositoryMockRecorder) Find(student interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockStudentRepository)(nil).Find), student)
}

// Save mocks base method.
func (m *MockStudentRepository) Save(student *entity.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", student)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockStudentRepositoryMockRecorder) Save(student interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStudentRepository)(nil).Save), student)
}
