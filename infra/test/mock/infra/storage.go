// Code generated by MockGen. DO NOT EDIT.
// Source: ./infra/storage/contract.go

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/piovani/go_full/infra/storage"
)

// MockStorageContract is a mock of StorageContract interface.
type MockStorageContract struct {
	ctrl     *gomock.Controller
	recorder *MockStorageContractMockRecorder
}

// MockStorageContractMockRecorder is the mock recorder for MockStorageContract.
type MockStorageContractMockRecorder struct {
	mock *MockStorageContract
}

// NewMockStorageContract creates a new mock instance.
func NewMockStorageContract(ctrl *gomock.Controller) *MockStorageContract {
	mock := &MockStorageContract{ctrl: ctrl}
	mock.recorder = &MockStorageContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageContract) EXPECT() *MockStorageContractMockRecorder {
	return m.recorder
}

// Donwload mocks base method.
func (m *MockStorageContract) Donwload(path string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Donwload", path)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Donwload indicates an expected call of Donwload.
func (mr *MockStorageContractMockRecorder) Donwload(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Donwload", reflect.TypeOf((*MockStorageContract)(nil).Donwload), path)
}

// Upload mocks base method.
func (m *MockStorageContract) Upload(file *storage.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockStorageContractMockRecorder) Upload(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockStorageContract)(nil).Upload), file)
}
